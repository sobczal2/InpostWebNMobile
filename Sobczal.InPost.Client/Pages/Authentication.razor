@page "/authentication/{action}"
@using System.Net
@using System.Net.Http.Json
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Configuration
@using Sobczal.InPost.Client.Components.Common

@inject NavigationManager Navigation
@inject IConfiguration Configuration
@inject HttpClient HttpClient

<RemoteAuthenticatorView Action="@Action" OnLogInSucceeded="CheckNewUser">
    <LogOut>
        @{
            var authority = (string)Configuration["Auth0:Authority"];
            var clientId = (string)Configuration["Auth0:ClientId"];

            Navigation.NavigateTo($"{authority}/v2/logout?client_id={clientId}");
        }
    </LogOut>
    <LoggingIn>
        <LoadedComponentBase Text="Logowanie..." Loading="true"/>
    </LoggingIn>
    <CompletingLoggingIn>
        <LoadedComponentBase Text="Kończenie logowania..." Loading="true"/>
    </CompletingLoggingIn>
</RemoteAuthenticatorView>

@code{

    [Parameter]
    public string Action { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private async Task CheckNewUser()
    {
        var user = (await AuthenticationStateTask).User;
        var result = await HttpClient.PostAsJsonAsync("/api/Users/EnsureNewUserExists", new {username = user.FindFirst("nickname")?.Value});
        if (result.StatusCode == HttpStatusCode.OK)
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            Navigation.NavigateTo("/ServerError", true);
        }
    }

}